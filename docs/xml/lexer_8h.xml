<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="lexer_8h" kind="file" language="C++">
    <compoundname>lexer.h</compoundname>
    <includes local="no">wchar.h</includes>
    <includes refid="util_8h" local="yes">util.h</includes>
    <includedby refid="eval_8c" local="yes">/home/bugy/projs/lobotomy/src/eval.c</includedby>
    <includedby refid="parse_8h" local="yes">/home/bugy/projs/lobotomy/src/parse.h</includedby>
    <incdepgraph>
      <node id="6">
        <label>stdbool.h</label>
      </node>
      <node id="7">
        <label>assert.h</label>
      </node>
      <node id="10">
        <label>float.h</label>
      </node>
      <node id="11">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="2">
        <label>wchar.h</label>
      </node>
      <node id="8">
        <label>string.h</label>
      </node>
      <node id="12">
        <label>time.h</label>
      </node>
      <node id="9">
        <label>math.h</label>
      </node>
      <node id="1">
        <label>/home/bugy/projs/lobotomy/src/lexer.h</label>
        <link refid="lexer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>error.h</label>
        <link refid="error_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/bugy/projs/lobotomy/src/eval.c</label>
        <link refid="eval_8c"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/bugy/projs/lobotomy/src/main.c</label>
        <link refid="main_8c"/>
      </node>
      <node id="1">
        <label>/home/bugy/projs/lobotomy/src/lexer.h</label>
        <link refid="lexer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/bugy/projs/lobotomy/src/parse.h</label>
        <link refid="parse_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structMARK" prot="public">MARK</innerclass>
    <innerclass refid="structTOKEN" prot="public">TOKEN</innerclass>
    <innerclass refid="structLEXER" prot="public">LEXER</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="lexer_8h_1aa7f7c0583d8dceb05d6abb7396f930db" prot="public" static="no">
        <name>IS_TERMINATOR</name>
        <param><defname>c</defname></param>
        <initializer>(strchr(&quot;() \n\t[]\&quot;&quot;, c) != NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="7" column="9" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lexer_8h_1af80a9f355b3a6227ae89b448f5134ab0" prot="public" static="no">
        <name>IS_VALID_SYMBOL_CHAR</name>
        <param><defname>c</defname></param>
        <initializer>((c &gt; 128 || c &lt; 0) || (c &gt;= &apos;a&apos; &amp;&amp; c &lt;= &apos;z&apos;) || (c &gt;= &apos;A&apos; &amp;&amp; c &lt;= &apos;Z&apos;) || strchr(&quot;+-_/?|*&amp;^%$#!~&lt;&gt;=&quot;, c) != NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="8" column="9" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lexer_8h_1ac49b7a967599330b42fabeee1e3ac2e0" prot="public" static="no">
        <name>IS_NUMBER</name>
        <param><defname>c</defname></param>
        <initializer>(c &gt;= &apos;0&apos; &amp;&amp; c &lt;= &apos;9&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="9" column="9" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="lexer_8h_1a8e0cab4dcc3ef592793ac045edcd6344" prot="public" static="no">
        <name>IS_WHITESPACE</name>
        <param><defname>c</defname></param>
        <initializer>(c == &apos;\n&apos; || c == &apos;\t&apos; || c == &apos; &apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="10" column="9" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7" prot="public" static="no" strong="no">
        <type></type>
        <name>@1</name>
        <enumvalue id="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7aadfc1978a51a953815cab51b30be7ea7" prot="public">
          <name>TT_</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7ac06233863baa0599eee41a5f224061cd" prot="public">
          <name>TT_LPAREN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a0722f48939ed4c943830cb288fc78881" prot="public">
          <name>TT_RPAREN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a0597d5576385f9f4f7df58a8dd83336e" prot="public">
          <name>TT_LBRACKET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a51f5c0e6edb2fa07591e5f67112d22bc" prot="public">
          <name>TT_RBRACKET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a71d6777fe79532b9c0e1a8dd3afc9f49" prot="public">
          <name>TT_NUMBER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a4e24d2ca30a1cb3870d16f2b4329a3da" prot="public">
          <name>TT_DECIMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a769a2bc7bb4ac95500a51fe972c347de" prot="public">
          <name>TT_STR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a464a5aac554c7208ae3a26a9a1fe1b6b" prot="public">
          <name>TT_IDENTIFIER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7ab91e34ed298a476be9ff784afa02608e" prot="public">
          <name>TT_COMMENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7aaa02ceb7278e9cef5153e63a48dce49e" prot="public">
          <name>TT_MUTABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="13" column="1" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="12" bodyend="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="lexer_8h_1ac70079acd08e373c320b86d028dea7b6" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* TOKEN_NAMES[]</definition>
        <argsstring>[]</argsstring>
        <name>TOKEN_NAMES</name>
        <initializer>= 
{
	&quot;TT_&quot;,
	&quot;<ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7ac06233863baa0599eee41a5f224061cd" kindref="member">TT_LPAREN</ref>&quot;,
	&quot;<ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a0722f48939ed4c943830cb288fc78881" kindref="member">TT_RPAREN</ref>&quot;,
	&quot;<ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a0597d5576385f9f4f7df58a8dd83336e" kindref="member">TT_LBRACKET</ref>&quot;,
	&quot;<ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a51f5c0e6edb2fa07591e5f67112d22bc" kindref="member">TT_RBRACKET</ref>&quot;,
	&quot;<ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a71d6777fe79532b9c0e1a8dd3afc9f49" kindref="member">TT_NUMBER</ref>&quot;,
	&quot;<ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a4e24d2ca30a1cb3870d16f2b4329a3da" kindref="member">TT_DECIMAL</ref>&quot;,
	&quot;<ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a769a2bc7bb4ac95500a51fe972c347de" kindref="member">TT_STR</ref>&quot;,
	&quot;<ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a464a5aac554c7208ae3a26a9a1fe1b6b" kindref="member">TT_IDENTIFIER</ref>&quot;,
	&quot;<ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7ab91e34ed298a476be9ff784afa02608e" kindref="member">TT_COMMENT</ref>&quot;,
	&quot;<ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7aaa02ceb7278e9cef5153e63a48dce49e" kindref="member">TT_MUTABLE</ref>&quot;,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="27" column="12" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lexer_8h_1a9c7e54203c54b35da2d8ccba4358c190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_token</definition>
        <argsstring>(TOKEN t)</argsstring>
        <name>print_token</name>
        <param>
          <type><ref refid="structTOKEN" kindref="compound">TOKEN</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="72" column="6" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="lexer_8h_1a1cb3a2c2312c4c83dde48121d7567f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_token_pos</definition>
        <argsstring>(TOKEN token, const char *s)</argsstring>
        <name>print_token_pos</name>
        <param>
          <type><ref refid="structTOKEN" kindref="compound">TOKEN</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="77" column="6" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="lexer_8h_1a5e1ff317ec6958c4495df3b3f865b71b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lexer_init</definition>
        <argsstring>(LEXER *lexer, const char *text)</argsstring>
        <name>lexer_init</name>
        <param>
          <type><ref refid="structLEXER" kindref="compound">LEXER</ref> *</type>
          <declname>lexer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="82" column="6" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="82" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="lexer_8h_1a84e8fb183ea9c615e30a55c02d2183b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void add_token</definition>
        <argsstring>(LEXER *lexer, TOKEN token, MARK stop)</argsstring>
        <name>add_token</name>
        <param>
          <type><ref refid="structLEXER" kindref="compound">LEXER</ref> *</type>
          <declname>lexer</declname>
        </param>
        <param>
          <type><ref refid="structTOKEN" kindref="compound">TOKEN</ref></type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="structMARK" kindref="compound">MARK</ref></type>
          <declname>stop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="104" column="6" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="104" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void str_add_char</definition>
        <argsstring>(TOKEN *token, char c)</argsstring>
        <name>str_add_char</name>
        <param>
          <type><ref refid="structTOKEN" kindref="compound">TOKEN</ref> *</type>
          <declname>token</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="115" column="6" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="115" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="lexer_8h_1ac78d1516a28c6352ee24588e003e50de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_token</definition>
        <argsstring>(TOKEN *token, MARK start)</argsstring>
        <name>init_token</name>
        <param>
          <type><ref refid="structTOKEN" kindref="compound">TOKEN</ref> *</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="structMARK" kindref="compound">MARK</ref></type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="129" column="6" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="129" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="lexer_8h_1adcafc84e6f69fdf1cdbea7281ad79b45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reset_token</definition>
        <argsstring>(TOKEN *token, MARK position)</argsstring>
        <name>reset_token</name>
        <param>
          <type><ref refid="structTOKEN" kindref="compound">TOKEN</ref> *</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="structMARK" kindref="compound">MARK</ref></type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="139" column="6" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="139" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="lexer_8h_1a907d215f50619b5799236d7babbcce8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structTOKEN" kindref="compound">TOKEN</ref></type>
        <definition>TOKEN new_token</definition>
        <argsstring>(MARK position, int type)</argsstring>
        <name>new_token</name>
        <param>
          <type><ref refid="structMARK" kindref="compound">MARK</ref></type>
          <declname>position</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="149" column="7" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="149" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="lexer_8h_1a5bbc272bd3fd81436ac17f73913c5eab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structTOKEN" kindref="compound">TOKEN</ref></type>
        <definition>TOKEN lex_word</definition>
        <argsstring>(LEXER *lexer)</argsstring>
        <name>lex_word</name>
        <param>
          <type><ref refid="structLEXER" kindref="compound">LEXER</ref> *</type>
          <declname>lexer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="160" column="7" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="160" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="lexer_8h_1a4306b7942d1e3c0932ed68bd5d5118e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structTOKEN" kindref="compound">TOKEN</ref></type>
        <definition>TOKEN lex_number</definition>
        <argsstring>(LEXER *lexer)</argsstring>
        <name>lex_number</name>
        <param>
          <type><ref refid="structLEXER" kindref="compound">LEXER</ref> *</type>
          <declname>lexer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="177" column="7" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="177" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="lexer_8h_1a16a2fd86594ee8b87cad96b8342ac3b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structTOKEN" kindref="compound">TOKEN</ref></type>
        <definition>TOKEN lex_string</definition>
        <argsstring>(LEXER *lexer)</argsstring>
        <name>lex_string</name>
        <param>
          <type><ref refid="structLEXER" kindref="compound">LEXER</ref> *</type>
          <declname>lexer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="220" column="7" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="220" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="lexer_8h_1afa90b3ca75eeb9295d567172b9c85f60" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void lex_ignore_untill_x</definition>
        <argsstring>(LEXER *lexer, const char *blacklist)</argsstring>
        <name>lex_ignore_untill_x</name>
        <param>
          <type><ref refid="structLEXER" kindref="compound">LEXER</ref> *</type>
          <declname>lexer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>blacklist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="296" column="20" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="296" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="lexer_8h_1af48cb6d3edb820ed634279f14a4ec832" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void lex_ignore_whitespace</definition>
        <argsstring>(LEXER *lexer)</argsstring>
        <name>lex_ignore_whitespace</name>
        <param>
          <type><ref refid="structLEXER" kindref="compound">LEXER</ref> *</type>
          <declname>lexer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="306" column="20" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="lexer_8h_1a98562013425e6f80e2ac68a2980b45cb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void lex_ignore_comment</definition>
        <argsstring>(LEXER *lexer)</argsstring>
        <name>lex_ignore_comment</name>
        <param>
          <type><ref refid="structLEXER" kindref="compound">LEXER</ref> *</type>
          <declname>lexer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="311" column="20" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="311" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="lexer_8h_1ab9a6fc96b92482b6807fa125d7c19af8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structLEXER" kindref="compound">LEXER</ref></type>
        <definition>LEXER tokenize</definition>
        <argsstring>(const char text[])</argsstring>
        <name>tokenize</name>
        <param>
          <type>const char</type>
          <declname>text</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/bugy/projs/lobotomy/src/lexer.h" line="316" column="7" bodyfile="/home/bugy/projs/lobotomy/src/lexer.h" bodystart="316" bodyend="454"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wchar.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="util_8h" kindref="compound">util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="lexer_8h_1aa7f7c0583d8dceb05d6abb7396f930db" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_TERMINATOR(c)<sp/>(strchr(&quot;()<sp/>\n\t[]\&quot;&quot;,<sp/>c)<sp/>!=<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="lexer_8h_1af80a9f355b3a6227ae89b448f5134ab0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_VALID_SYMBOL_CHAR(c)<sp/>((c<sp/>&gt;<sp/>128<sp/>||<sp/>c<sp/>&lt;<sp/>0)<sp/>||<sp/>(c<sp/>&gt;=<sp/>&apos;a&apos;<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/>&apos;z&apos;)<sp/>||<sp/>(c<sp/>&gt;=<sp/>&apos;A&apos;<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/>&apos;Z&apos;)<sp/>||<sp/>strchr(&quot;+-_/?|*&amp;^%$#!~&lt;&gt;=&quot;,<sp/>c)<sp/>!=<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="lexer_8h_1ac49b7a967599330b42fabeee1e3ac2e0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_NUMBER(c)<sp/>(c<sp/>&gt;=<sp/>&apos;0&apos;<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/>&apos;9&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="lexer_8h_1a8e0cab4dcc3ef592793ac045edcd6344" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_WHITESPACE(c)<sp/>(c<sp/>==<sp/>&apos;\n&apos;<sp/>||<sp/>c<sp/>==<sp/>&apos;\t&apos;<sp/>||<sp/>c<sp/>==<sp/>&apos;<sp/>&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14" refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7aadfc1978a51a953815cab51b30be7ea7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7aadfc1978a51a953815cab51b30be7ea7" kindref="member">TT_</ref>,</highlight></codeline>
<codeline lineno="15" refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7ac06233863baa0599eee41a5f224061cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7ac06233863baa0599eee41a5f224061cd" kindref="member">TT_LPAREN</ref>,</highlight></codeline>
<codeline lineno="16" refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a0722f48939ed4c943830cb288fc78881" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a0722f48939ed4c943830cb288fc78881" kindref="member">TT_RPAREN</ref>,</highlight></codeline>
<codeline lineno="17" refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a0597d5576385f9f4f7df58a8dd83336e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a0597d5576385f9f4f7df58a8dd83336e" kindref="member">TT_LBRACKET</ref>,</highlight></codeline>
<codeline lineno="18" refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a51f5c0e6edb2fa07591e5f67112d22bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a51f5c0e6edb2fa07591e5f67112d22bc" kindref="member">TT_RBRACKET</ref>,</highlight></codeline>
<codeline lineno="19" refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a71d6777fe79532b9c0e1a8dd3afc9f49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a71d6777fe79532b9c0e1a8dd3afc9f49" kindref="member">TT_NUMBER</ref>,</highlight></codeline>
<codeline lineno="20" refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a4e24d2ca30a1cb3870d16f2b4329a3da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a4e24d2ca30a1cb3870d16f2b4329a3da" kindref="member">TT_DECIMAL</ref>,</highlight></codeline>
<codeline lineno="21" refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a769a2bc7bb4ac95500a51fe972c347de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a769a2bc7bb4ac95500a51fe972c347de" kindref="member">TT_STR</ref>,</highlight></codeline>
<codeline lineno="22" refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a464a5aac554c7208ae3a26a9a1fe1b6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a464a5aac554c7208ae3a26a9a1fe1b6b" kindref="member">TT_IDENTIFIER</ref>,</highlight></codeline>
<codeline lineno="23" refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7ab91e34ed298a476be9ff784afa02608e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7ab91e34ed298a476be9ff784afa02608e" kindref="member">TT_COMMENT</ref>,</highlight></codeline>
<codeline lineno="24" refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7aaa02ceb7278e9cef5153e63a48dce49e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7aaa02ceb7278e9cef5153e63a48dce49e" kindref="member">TT_MUTABLE</ref>,</highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="lexer_8h_1ac70079acd08e373c320b86d028dea7b6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="lexer_8h_1ac70079acd08e373c320b86d028dea7b6" kindref="member">TOKEN_NAMES</ref>[]<sp/>=<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TT_&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TT_LPAREN&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TT_RPAREN&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TT_LBRACKET&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TT_RBRACKET&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TT_NUMBER&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TT_DECIMAL&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TT_STR&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TT_IDENTIFIER&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TT_COMMENT&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;TT_MUTABLE&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="structMARK" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44" refid="structMARK_1a41ebd28ef1d7c6ade45642cb6acc1039" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structMARK_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>,<sp/>column;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}<sp/><ref refid="structMARK" kindref="compound">MARK</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="structTOKEN" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49" refid="structTOKEN_1aa04b301e4126e479f367d43c7fe62046" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structMARK" kindref="compound">MARK</ref><sp/>start,<sp/><ref refid="structTOKEN_1aa04b301e4126e479f367d43c7fe62046" kindref="member">stop</ref>;</highlight></codeline>
<codeline lineno="50" refid="structTOKEN_1ac765329451135abec74c45e1897abf26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structTOKEN_1ac765329451135abec74c45e1897abf26" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="51" refid="structTOKEN_1afed088663f8704004425cdae2120b9b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/><ref refid="structTOKEN_1afed088663f8704004425cdae2120b9b3" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="52" refid="structTOKEN_1a5633b1433389cec21ade3811bbe9ca5b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structTOKEN_1a5633b1433389cec21ade3811bbe9ca5b" kindref="member">text</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}<sp/><ref refid="structTOKEN" kindref="compound">TOKEN</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="structLEXER" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57" refid="structLEXER_1a16343090e80c4472521560f30113d96c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structLEXER_1a16343090e80c4472521560f30113d96c" kindref="member">text</ref>;</highlight></codeline>
<codeline lineno="58" refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>text_len,<sp/><ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="structLEXER_1ab3ced33ac8e367d2e28289b43bc99623" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTOKEN" kindref="compound">TOKEN</ref>*<sp/><ref refid="structLEXER_1ab3ced33ac8e367d2e28289b43bc99623" kindref="member">tokens</ref>;</highlight></codeline>
<codeline lineno="61" refid="structLEXER_1a439227feff9d7f55384e8780cfc2eb82" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/><ref refid="structLEXER_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>,<sp/>peek;</highlight></codeline>
<codeline lineno="62" refid="structLEXER_1a95bb7727fb13bbbd97de25281799dc58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structLEXER_1a95bb7727fb13bbbd97de25281799dc58" kindref="member">ignore_untill_current_token_end</ref>;</highlight></codeline>
<codeline lineno="63" refid="structLEXER_1a5a353135a122c568e4edfa553ae74df7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structLEXER_1a5a353135a122c568e4edfa553ae74df7" kindref="member">ignore_untill_next_token_end</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="structLEXER_1ab48e526c921c371ea1b94f3a8a9d2dfc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structLEXER_1ab48e526c921c371ea1b94f3a8a9d2dfc" kindref="member">p_count</ref>;</highlight></codeline>
<codeline lineno="66" refid="structLEXER_1a76f07866ff6ee681791119992024df8d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structLEXER_1a76f07866ff6ee681791119992024df8d" kindref="member">b_count</ref>;</highlight></codeline>
<codeline lineno="67" refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structMARK" kindref="compound">MARK</ref><sp/><ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">}<sp/><ref refid="structLEXER" kindref="compound">LEXER</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="lexer_8h_1a9c7e54203c54b35da2d8ccba4358c190" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lexer_8h_1a9c7e54203c54b35da2d8ccba4358c190" kindref="member">print_token</ref>(<ref refid="structTOKEN" kindref="compound">TOKEN</ref><sp/>t)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a4f2705df522fd01ea20cea002f2d4304" kindref="member">printd</ref>(</highlight><highlight class="stringliteral">&quot;TOKEN<sp/>[%s]:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="lexer_8h_1ac70079acd08e373c320b86d028dea7b6" kindref="member">TOKEN_NAMES</ref>[t.<ref refid="structTOKEN_1ac765329451135abec74c45e1897abf26" kindref="member">type</ref>],<sp/>t.<ref refid="structTOKEN_1a5633b1433389cec21ade3811bbe9ca5b" kindref="member">text</ref>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="lexer_8h_1a1cb3a2c2312c4c83dde48121d7567f5f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lexer_8h_1a1cb3a2c2312c4c83dde48121d7567f5f" kindref="member">print_token_pos</ref>(<ref refid="structTOKEN" kindref="compound">TOKEN</ref><sp/>token,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a4f2705df522fd01ea20cea002f2d4304" kindref="member">printd</ref>(</highlight><highlight class="stringliteral">&quot;%s<sp/>%d.%d<sp/>--<sp/>%d.%d\n&quot;</highlight><highlight class="normal">,<sp/>s,<sp/>token.<ref refid="structTOKEN_1a4a0391da14ef565d12d9287bc470f1eb" kindref="member">start</ref>.<ref refid="structMARK_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>,<sp/>token.<ref refid="structTOKEN_1a4a0391da14ef565d12d9287bc470f1eb" kindref="member">start</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref>,<sp/>token.<ref refid="structTOKEN_1aa04b301e4126e479f367d43c7fe62046" kindref="member">stop</ref>.<ref refid="structMARK_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>,<sp/>token.<ref refid="structTOKEN_1aa04b301e4126e479f367d43c7fe62046" kindref="member">stop</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="lexer_8h_1a5e1ff317ec6958c4495df3b3f865b71b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lexer_8h_1a5e1ff317ec6958c4495df3b3f865b71b" kindref="member">lexer_init</ref>(<ref refid="structLEXER" kindref="compound">LEXER</ref>*<sp/>lexer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>text)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1a81c98c6ff8ae71bb42def8b2fb21e1c9" kindref="member">text_len</ref><sp/>=<sp/>strlen(text);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lexer-&gt;text<sp/>=<sp/>calloc(lexer-&gt;text_len,<sp/>sizeof(char));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1a16343090e80c4472521560f30113d96c" kindref="member">text</ref><sp/>=<sp/>text;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mbstowcs(lexer-&gt;text,<sp/>text,<sp/>lexer-&gt;text_len);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1a750b5d744c39a06bfb13e6eb010e35d0" kindref="member">index</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1a53b2e5f39966b20bc672afaaaf9edf86" kindref="member">peek</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1a95bb7727fb13bbbd97de25281799dc58" kindref="member">ignore_untill_current_token_end</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1a5a353135a122c568e4edfa553ae74df7" kindref="member">ignore_untill_next_token_end</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1ab3ced33ac8e367d2e28289b43bc99623" kindref="member">tokens</ref><sp/>=<sp/>calloc(lexer-&gt;<ref refid="structLEXER_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structTOKEN" kindref="compound">TOKEN</ref>));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1ab48e526c921c371ea1b94f3a8a9d2dfc" kindref="member">p_count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1a76f07866ff6ee681791119992024df8d" kindref="member">b_count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="lexer_8h_1a84e8fb183ea9c615e30a55c02d2183b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lexer_8h_1a84e8fb183ea9c615e30a55c02d2183b2" kindref="member">add_token</ref>(<ref refid="structLEXER" kindref="compound">LEXER</ref>*<sp/>lexer,<sp/><ref refid="structTOKEN" kindref="compound">TOKEN</ref><sp/>token,<sp/><ref refid="structMARK" kindref="compound">MARK</ref><sp/>stop)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="structTOKEN_1aa04b301e4126e479f367d43c7fe62046" kindref="member">stop</ref><sp/>=<sp/>stop;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lexer-&gt;<ref refid="structLEXER_1a750b5d744c39a06bfb13e6eb010e35d0" kindref="member">index</ref>+1<sp/>&gt;=<sp/>lexer-&gt;<ref refid="structLEXER_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>+=<sp/>10;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1ab3ced33ac8e367d2e28289b43bc99623" kindref="member">tokens</ref><sp/>=<sp/>realloc(lexer-&gt;<ref refid="structLEXER_1ab3ced33ac8e367d2e28289b43bc99623" kindref="member">tokens</ref>,<sp/>lexer-&gt;<ref refid="structLEXER_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structTOKEN" kindref="compound">TOKEN</ref>));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1ab3ced33ac8e367d2e28289b43bc99623" kindref="member">tokens</ref>[lexer-&gt;<ref refid="structLEXER_1a750b5d744c39a06bfb13e6eb010e35d0" kindref="member">index</ref>++]<sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" kindref="member">str_add_char</ref>(<ref refid="structTOKEN" kindref="compound">TOKEN</ref>*<sp/>token,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structTOKEN_1a5633b1433389cec21ade3811bbe9ca5b" kindref="member">text</ref>[token-&gt;<ref refid="structTOKEN_1a750b5d744c39a06bfb13e6eb010e35d0" kindref="member">index</ref>]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structTOKEN_1a5633b1433389cec21ade3811bbe9ca5b" kindref="member">text</ref>[token-&gt;<ref refid="structTOKEN_1a750b5d744c39a06bfb13e6eb010e35d0" kindref="member">index</ref>+1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structTOKEN_1a750b5d744c39a06bfb13e6eb010e35d0" kindref="member">index</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token-&gt;<ref refid="structTOKEN_1a750b5d744c39a06bfb13e6eb010e35d0" kindref="member">index</ref><sp/>&gt;=<sp/>token-&gt;<ref refid="structTOKEN_1afed088663f8704004425cdae2120b9b3" kindref="member">len</ref>)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;max:<sp/>%s<sp/>%d<sp/>%d\n&quot;,<sp/>str,<sp/>*index,<sp/>*max);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structTOKEN_1afed088663f8704004425cdae2120b9b3" kindref="member">len</ref><sp/>+=<sp/>10;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;max<sp/>after:<sp/>%s<sp/>%d<sp/>%d<sp/>\n&quot;,<sp/>str,<sp/>*index,<sp/>*max);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structTOKEN_1a5633b1433389cec21ade3811bbe9ca5b" kindref="member">text</ref><sp/>=<sp/>realloc(token-&gt;<ref refid="structTOKEN_1a5633b1433389cec21ade3811bbe9ca5b" kindref="member">text</ref>,<sp/>token-&gt;<ref refid="structTOKEN_1afed088663f8704004425cdae2120b9b3" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="lexer_8h_1ac78d1516a28c6352ee24588e003e50de" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lexer_8h_1ac78d1516a28c6352ee24588e003e50de" kindref="member">init_token</ref>(<ref refid="structTOKEN" kindref="compound">TOKEN</ref>*<sp/>token,<sp/><ref refid="structMARK" kindref="compound">MARK</ref><sp/>start)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structTOKEN_1a5633b1433389cec21ade3811bbe9ca5b" kindref="member">text</ref><sp/>=<sp/>calloc(2,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structTOKEN_1ac765329451135abec74c45e1897abf26" kindref="member">type</ref><sp/>=<sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7aadfc1978a51a953815cab51b30be7ea7" kindref="member">TT_</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structTOKEN_1a750b5d744c39a06bfb13e6eb010e35d0" kindref="member">index</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structTOKEN_1afed088663f8704004425cdae2120b9b3" kindref="member">len</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structTOKEN_1a4a0391da14ef565d12d9287bc470f1eb" kindref="member">start</ref><sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="lexer_8h_1adcafc84e6f69fdf1cdbea7281ad79b45" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="lexer_8h_1adcafc84e6f69fdf1cdbea7281ad79b45" kindref="member">reset_token</ref>(<ref refid="structTOKEN" kindref="compound">TOKEN</ref>*<sp/>token,<sp/><ref refid="structMARK" kindref="compound">MARK</ref><sp/>position)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>freeing<sp/>the<sp/>text<sp/>because<sp/>it&apos;s<sp/>still<sp/>alive<sp/>in<sp/>the<sp/>lexer-&gt;tokens<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structTOKEN_1a5633b1433389cec21ade3811bbe9ca5b" kindref="member">text</ref><sp/>=<sp/>calloc(2,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structTOKEN_1a750b5d744c39a06bfb13e6eb010e35d0" kindref="member">index</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structTOKEN_1afed088663f8704004425cdae2120b9b3" kindref="member">len</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structTOKEN_1ac765329451135abec74c45e1897abf26" kindref="member">type</ref><sp/>=<sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7aadfc1978a51a953815cab51b30be7ea7" kindref="member">TT_</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>token-&gt;<ref refid="structTOKEN_1a4a0391da14ef565d12d9287bc470f1eb" kindref="member">start</ref><sp/>=<sp/>position;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="lexer_8h_1a907d215f50619b5799236d7babbcce8b" refkind="member"><highlight class="normal"><ref refid="structTOKEN" kindref="compound">TOKEN</ref><sp/><ref refid="lexer_8h_1a907d215f50619b5799236d7babbcce8b" kindref="member">new_token</ref>(<ref refid="structMARK" kindref="compound">MARK</ref><sp/>position,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTOKEN" kindref="compound">TOKEN</ref><sp/>token;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="structTOKEN_1a5633b1433389cec21ade3811bbe9ca5b" kindref="member">text</ref><sp/>=<sp/>calloc(2,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="structTOKEN_1a750b5d744c39a06bfb13e6eb010e35d0" kindref="member">index</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="structTOKEN_1afed088663f8704004425cdae2120b9b3" kindref="member">len</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="structTOKEN_1ac765329451135abec74c45e1897abf26" kindref="member">type</ref><sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>token.<ref refid="structTOKEN_1a4a0391da14ef565d12d9287bc470f1eb" kindref="member">start</ref><sp/>=<sp/>position;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>token;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="lexer_8h_1a5bbc272bd3fd81436ac17f73913c5eab" refkind="member"><highlight class="normal"><ref refid="structTOKEN" kindref="compound">TOKEN</ref><sp/><ref refid="lexer_8h_1a5bbc272bd3fd81436ac17f73913c5eab" kindref="member">lex_word</ref>(<ref refid="structLEXER" kindref="compound">LEXER</ref>*<sp/>lexer)</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTOKEN" kindref="compound">TOKEN</ref><sp/>token<sp/>=<sp/><ref refid="lexer_8h_1a907d215f50619b5799236d7babbcce8b" kindref="member">new_token</ref>(lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>,<sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a464a5aac554c7208ae3a26a9a1fe1b6b" kindref="member">TT_IDENTIFIER</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>lexer-&gt;<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref><sp/>&lt;<sp/>lexer-&gt;<ref refid="structLEXER_1a81c98c6ff8ae71bb42def8b2fb21e1c9" kindref="member">text_len</ref>;<sp/>lexer-&gt;<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>++,<sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref>++)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>lexer-&gt;<ref refid="structLEXER_1a16343090e80c4472521560f30113d96c" kindref="member">text</ref>[lexer-&gt;<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>];</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{<sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref><sp/>=<sp/>0;<sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>++;<sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lexer_8h_1af80a9f355b3a6227ae89b448f5134ab0" kindref="member">IS_VALID_SYMBOL_CHAR</ref>(c))<sp/>{<sp/><ref refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" kindref="member">str_add_char</ref>(&amp;token,<sp/>c);<sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lexer_8h_1aa7f7c0583d8dceb05d6abb7396f930db" kindref="member">IS_TERMINATOR</ref>(c))<sp/>{<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/><ref refid="util_8h_1a5134b2f308b8e125e5f987ac66222050" kindref="member">exit</ref>;<sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a5134b2f308b8e125e5f987ac66222050" kindref="member">exit</ref>:</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>--;<sp/></highlight><highlight class="comment">//<sp/>return<sp/>so<sp/>the<sp/>main<sp/>lexer<sp/>loop<sp/>acknowledges<sp/>the<sp/>terminator<sp/>symbol<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>token;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="lexer_8h_1a4306b7942d1e3c0932ed68bd5d5118e2" refkind="member"><highlight class="normal"><ref refid="structTOKEN" kindref="compound">TOKEN</ref><sp/><ref refid="lexer_8h_1a4306b7942d1e3c0932ed68bd5d5118e2" kindref="member">lex_number</ref>(<ref refid="structLEXER" kindref="compound">LEXER</ref>*<sp/>lexer)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTOKEN" kindref="compound">TOKEN</ref><sp/>token<sp/>=<sp/><ref refid="lexer_8h_1a907d215f50619b5799236d7babbcce8b" kindref="member">new_token</ref>(lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>,<sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a71d6777fe79532b9c0e1a8dd3afc9f49" kindref="member">TT_NUMBER</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>in_decimal<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>lexer-&gt;<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref><sp/>&lt;<sp/>lexer-&gt;<ref refid="structLEXER_1a81c98c6ff8ae71bb42def8b2fb21e1c9" kindref="member">text_len</ref>;<sp/>lexer-&gt;<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>++,<sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref>++)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>lexer-&gt;<ref refid="structLEXER_1a16343090e80c4472521560f30113d96c" kindref="member">text</ref>[lexer-&gt;<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lexer_8h_1ac49b7a967599330b42fabeee1e3ac2e0" kindref="member">IS_NUMBER</ref>(c))<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" kindref="member">str_add_char</ref>(&amp;token,<sp/>c);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in_decimal)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="error_8h_1ad94fa9a0cd88ad6a38f08319aeefdebb" kindref="member">lobotomy_error_s</ref>(<ref refid="error_8h_1a06fc87d81c62e9abb8790b6e5713c55baa4568e0e01703b60c13a1cf4dad0d0d8" kindref="member">ERR_INVALID_DECIMAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>decimal<sp/>at<sp/>%d.%d\n&quot;</highlight><highlight class="normal">,<sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>,<sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" kindref="member">str_add_char</ref>(&amp;token,<sp/>c);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="structTOKEN_1ac765329451135abec74c45e1897abf26" kindref="member">type</ref><sp/>=<sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a4e24d2ca30a1cb3870d16f2b4329a3da" kindref="member">TT_DECIMAL</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>token.<ref refid="structTOKEN_1a750b5d744c39a06bfb13e6eb010e35d0" kindref="member">index</ref><sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>token.<ref refid="structTOKEN_1a750b5d744c39a06bfb13e6eb010e35d0" kindref="member">index</ref><sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lexer_8h_1aa7f7c0583d8dceb05d6abb7396f930db" kindref="member">IS_TERMINATOR</ref>(c))</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/><ref refid="util_8h_1a5134b2f308b8e125e5f987ac66222050" kindref="member">exit</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="error_8h_1ad94fa9a0cd88ad6a38f08319aeefdebb" kindref="member">lobotomy_error_s</ref>(<ref refid="error_8h_1a06fc87d81c62e9abb8790b6e5713c55babdbe34d491ffaead3d75cc9cb5c45ea4" kindref="member">ERR_INVALID_CHARACTER_IN_NUMBER</ref>,<sp/></highlight><highlight class="stringliteral">&quot;found<sp/>invalid<sp/>character<sp/>&apos;%c&apos;<sp/>in<sp/>number<sp/>at<sp/>%d.%d\n&quot;</highlight><highlight class="normal">,<sp/>c,<sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>,<sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a5134b2f308b8e125e5f987ac66222050" kindref="member">exit</ref>:</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>--;<sp/></highlight><highlight class="comment">//<sp/>return<sp/>so<sp/>the<sp/>main<sp/>lexer<sp/>loop<sp/>acknowledges<sp/>the<sp/>terminator<sp/>symbol<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>token;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="lexer_8h_1a16a2fd86594ee8b87cad96b8342ac3b2" refkind="member"><highlight class="normal"><ref refid="structTOKEN" kindref="compound">TOKEN</ref><sp/><ref refid="lexer_8h_1a16a2fd86594ee8b87cad96b8342ac3b2" kindref="member">lex_string</ref>(<ref refid="structLEXER" kindref="compound">LEXER</ref>*<sp/>lexer)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTOKEN" kindref="compound">TOKEN</ref><sp/>token<sp/>=<sp/><ref refid="lexer_8h_1a907d215f50619b5799236d7babbcce8b" kindref="member">new_token</ref>(lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>,<sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a769a2bc7bb4ac95500a51fe972c347de" kindref="member">TT_STR</ref>);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>escaped<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>lexer-&gt;<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref><sp/>&lt;<sp/>lexer-&gt;<ref refid="structLEXER_1a81c98c6ff8ae71bb42def8b2fb21e1c9" kindref="member">text_len</ref>;<sp/>lexer-&gt;<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>++,<sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref>++)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>lexer-&gt;<ref refid="structLEXER_1a16343090e80c4472521560f30113d96c" kindref="member">text</ref>[lexer-&gt;<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>];</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!escaped)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="error_8h_1ad94fa9a0cd88ad6a38f08319aeefdebb" kindref="member">lobotomy_error_s</ref>(<ref refid="error_8h_1a06fc87d81c62e9abb8790b6e5713c55ba1fec3900dbb6a0459a903002ec4b56b9" kindref="member">ERR_UNESCAPED_NEW_LINE_IN_STRING_LITERAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;found<sp/>a<sp/>new<sp/>line<sp/>in<sp/>string<sp/>literal<sp/>at<sp/>%d.%d&quot;</highlight><highlight class="normal">,<sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>,<sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>token;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref><sp/>=<sp/>0;<sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>++;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!escaped)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>escaped<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>token;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" kindref="member">str_add_char</ref>(&amp;token,<sp/>c);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(escaped)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>escaped<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" kindref="member">str_add_char</ref>(&amp;token,<sp/></highlight><highlight class="charliteral">&apos;\a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" kindref="member">str_add_char</ref>(&amp;token,<sp/></highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" kindref="member">str_add_char</ref>(&amp;token,<sp/></highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" kindref="member">str_add_char</ref>(&amp;token,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" kindref="member">str_add_char</ref>(&amp;token,<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" kindref="member">str_add_char</ref>(&amp;token,<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" kindref="member">str_add_char</ref>(&amp;token,<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" kindref="member">str_add_char</ref>(&amp;token,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" kindref="member">str_add_char</ref>(&amp;token,<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>token;</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lex_ignore_untill_x(<ref refid="structLEXER" kindref="compound">LEXER</ref>*<sp/>lexer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>blacklist)</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>lexer-&gt;<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref><sp/>&lt;<sp/>lexer-&gt;<ref refid="structLEXER_1a81c98c6ff8ae71bb42def8b2fb21e1c9" kindref="member">text_len</ref>;<sp/>lexer-&gt;<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>++,<sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref>++)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>lexer-&gt;<ref refid="structLEXER_1a16343090e80c4472521560f30113d96c" kindref="member">text</ref>[lexer-&gt;<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>];</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{<sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref><sp/>=<sp/>0;<sp/>lexer-&gt;<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>++;<sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strchr(blacklist,<sp/>c)<sp/>!=<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lex_ignore_whitespace(<ref refid="structLEXER" kindref="compound">LEXER</ref>*<sp/>lexer)</highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>lex_ignore_untill_x(lexer,<sp/></highlight><highlight class="stringliteral">&quot;\n\t<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lex_ignore_comment(<ref refid="structLEXER" kindref="compound">LEXER</ref>*<sp/>lexer)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>lex_ignore_untill_x(lexer,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="lexer_8h_1ab9a6fc96b92482b6807fa125d7c19af8" refkind="member"><highlight class="normal"><ref refid="structLEXER" kindref="compound">LEXER</ref><sp/><ref refid="lexer_8h_1ab9a6fc96b92482b6807fa125d7c19af8" kindref="member">tokenize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>text[])</highlight></codeline>
<codeline lineno="317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;wchar:<sp/>%u\n&quot;,<sp/>sizeof(wchar_t));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLEXER" kindref="compound">LEXER</ref><sp/>lexer;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a5e1ff317ec6958c4495df3b3f865b71b" kindref="member">lexer_init</ref>(&amp;lexer,<sp/>text);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>static<sp/>const<sp/>TOKEN<sp/>reset;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTOKEN" kindref="compound">TOKEN</ref><sp/>token;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1adcafc84e6f69fdf1cdbea7281ad79b45" kindref="member">reset_token</ref>(&amp;token,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLEXER" kindref="compound">LEXER</ref><sp/>brackets;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a5e1ff317ec6958c4495df3b3f865b71b" kindref="member">lexer_init</ref>(&amp;brackets,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>lexer.<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref><sp/>&lt;<sp/>lexer.<ref refid="structLEXER_1a81c98c6ff8ae71bb42def8b2fb21e1c9" kindref="member">text_len</ref>;<sp/>lexer.<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>++,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref>++)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>lexer.<ref refid="structLEXER_1a16343090e80c4472521560f30113d96c" kindref="member">text</ref>[lexer.<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>];</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;c:<sp/>%d\n&quot;,<sp/>c);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(c<sp/>&amp;<sp/>0b10000000<sp/>&gt;=<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c<sp/>&lt;&lt;=<sp/>8;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c<sp/>&amp;=<sp/>text[lexer.text_peek++];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>++;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>lexer.<ref refid="structLEXER_1a16343090e80c4472521560f30113d96c" kindref="member">text</ref>[lexer.<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>+1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>++;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref>++;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lex_ignore_comment(&amp;lexer);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>lexer.<ref refid="structLEXER_1a16343090e80c4472521560f30113d96c" kindref="member">text</ref>[lexer.<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>+1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>++;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref>++;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="structTOKEN_1a5633b1433389cec21ade3811bbe9ca5b" kindref="member">text</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="structTOKEN_1a4a0391da14ef565d12d9287bc470f1eb" kindref="member">start</ref><sp/>=<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a84e8fb183ea9c615e30a55c02d2183b2" kindref="member">add_token</ref>(&amp;lexer,<sp/>token,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1adcafc84e6f69fdf1cdbea7281ad79b45" kindref="member">reset_token</ref>(&amp;token,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lexer_8h_1a8e0cab4dcc3ef592793ac045edcd6344" kindref="member">IS_WHITESPACE</ref>(c))</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lex_ignore_whitespace(&amp;lexer);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;@&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" kindref="member">str_add_char</ref>(&amp;token,<sp/>c);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="structTOKEN_1a4a0391da14ef565d12d9287bc470f1eb" kindref="member">start</ref><sp/>=<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a84e8fb183ea9c615e30a55c02d2183b2" kindref="member">add_token</ref>(&amp;lexer,<sp/>token,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1adcafc84e6f69fdf1cdbea7281ad79b45" kindref="member">reset_token</ref>(&amp;token,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="obj_8h_1a3cb9f0894fab1c8fbb0753c9c7c2a8d9" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;before:<sp/>%d.%d\n&quot;</highlight><highlight class="normal">,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref>);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lexer.<ref refid="structLEXER_1a30f3d35f3997af6b67bd49fe551ff23d" kindref="member">text_peek</ref>++;<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>the<sp/>first<sp/>quote</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a84e8fb183ea9c615e30a55c02d2183b2" kindref="member">add_token</ref>(&amp;lexer,<sp/><ref refid="lexer_8h_1a16a2fd86594ee8b87cad96b8342ac3b2" kindref="member">lex_string</ref>(&amp;lexer),<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="obj_8h_1a3cb9f0894fab1c8fbb0753c9c7c2a8d9" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;after:<sp/>%d.%d\n&quot;</highlight><highlight class="normal">,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lexer_8h_1ac49b7a967599330b42fabeee1e3ac2e0" kindref="member">IS_NUMBER</ref>(c))<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a84e8fb183ea9c615e30a55c02d2183b2" kindref="member">add_token</ref>(&amp;lexer,<sp/><ref refid="lexer_8h_1a4306b7942d1e3c0932ed68bd5d5118e2" kindref="member">lex_number</ref>(&amp;lexer),<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="lexer_8h_1af80a9f355b3a6227ae89b448f5134ab0" kindref="member">IS_VALID_SYMBOL_CHAR</ref>(c))<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a84e8fb183ea9c615e30a55c02d2183b2" kindref="member">add_token</ref>(&amp;lexer,<sp/><ref refid="lexer_8h_1a5bbc272bd3fd81436ac17f73913c5eab" kindref="member">lex_word</ref>(&amp;lexer),<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="structTOKEN_1a4a0391da14ef565d12d9287bc470f1eb" kindref="member">start</ref><sp/>=<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a21d18ec3f683685f92b39888d06de7fe" kindref="member">str_add_char</ref>(&amp;token,<sp/>c);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="structTOKEN_1ac765329451135abec74c45e1897abf26" kindref="member">type</ref><sp/>=<sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7ac06233863baa0599eee41a5f224061cd" kindref="member">TT_LPAREN</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b_count++;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="structTOKEN_1ac765329451135abec74c45e1897abf26" kindref="member">type</ref><sp/>=<sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a0722f48939ed4c943830cb288fc78881" kindref="member">TT_RPAREN</ref>;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b_count--;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b_count<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="error_8h_1aaf5a3a25a3c8bf7799337ad144d8c617" kindref="member">lobotomy_error_s_ne</ref>(<ref refid="error_8h_1a06fc87d81c62e9abb8790b6e5713c55ba9050de8078352b9892e4bc2a969d9b30" kindref="member">ERR_TOO_MANY_BRACKETS</ref>,<sp/></highlight><highlight class="stringliteral">&quot;too<sp/>many<sp/>brackets<sp/>at<sp/>%d.%d&quot;</highlight><highlight class="normal">,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref>);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="structTOKEN_1ac765329451135abec74c45e1897abf26" kindref="member">type</ref><sp/>=<sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a0597d5576385f9f4f7df58a8dd83336e" kindref="member">TT_LBRACKET</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.<ref refid="structTOKEN_1ac765329451135abec74c45e1897abf26" kindref="member">type</ref><sp/>=<sp/><ref refid="lexer_8h_1adf764cbdea00d65edcd07bb9953ad2b7a51f5c0e6edb2fa07591e5f67112d22bc" kindref="member">TT_RBRACKET</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(b_count<sp/>&lt;<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lobotomy_error_s_ne(ERR_TOO_MANY_BRACKETS,<sp/>&quot;too<sp/>many<sp/>brackets<sp/>at<sp/>%d.%d&quot;,<sp/>line,<sp/>column);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="error_8h_1aaf5a3a25a3c8bf7799337ad144d8c617" kindref="member">lobotomy_error_s_ne</ref>(<ref refid="error_8h_1a06fc87d81c62e9abb8790b6e5713c55babc00a0934771db082ac84e60a45406cf" kindref="member">ERR_UNKNOWN_CHARACTER</ref>,<sp/></highlight><highlight class="stringliteral">&quot;ENCOUNTERED<sp/>UNKNOWN<sp/>CHARACTER<sp/>&apos;%c&apos;<sp/>at<sp/>%d.%d&quot;</highlight><highlight class="normal">,<sp/>c,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a41ebd28ef1d7c6ade45642cb6acc1039" kindref="member">line</ref>,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>.<ref refid="structMARK_1a60dae4c6e78188cd718b696e4f08fc71" kindref="member">column</ref>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a84e8fb183ea9c615e30a55c02d2183b2" kindref="member">add_token</ref>(&amp;lexer,<sp/>token,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1a84e8fb183ea9c615e30a55c02d2183b2" kindref="member">add_token</ref>(&amp;brackets,<sp/>token,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="lexer_8h_1adcafc84e6f69fdf1cdbea7281ad79b45" kindref="member">reset_token</ref>(&amp;token,<sp/>lexer.<ref refid="structLEXER_1a7b8c86d9685c5e4cca94667c88c19440" kindref="member">pos</ref>);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>int<sp/>b_i<sp/>=<sp/>0,<sp/>b_j<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(b_count<sp/>&gt;<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(;<sp/>b_i<sp/>&lt;<sp/>brackets.index;<sp/>b_i++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(brackets.tokens[b_i].type<sp/>==<sp/>TT_LPAREN)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>(b_j<sp/>=<sp/>b_i<sp/>+<sp/>1;<sp/>b_j<sp/>&lt;=<sp/>brackets.index;<sp/>b_j++)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(brackets.tokens[b_j].type<sp/>==<sp/>TT_RPAREN)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lobotomy_error_s_ne(ERR_NO_MATCHING_BRACKET,<sp/>&quot;bracket<sp/>at<sp/>%d.%d<sp/>is<sp/>not<sp/>closed&quot;,<sp/>brackets.tokens[b_i].start.line,<sp/>brackets.tokens[b_i].start.column);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>my_assert((b_count<sp/>&gt;<sp/>0),<sp/>&quot;bracket<sp/>is<sp/>not<sp/>closed&quot;,<sp/>ERR_NO_MATCHING_BRACKET,<sp/>line,<sp/>column);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lexer.<ref refid="structLEXER_1a750b5d744c39a06bfb13e6eb010e35d0" kindref="member">index</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lexer.<ref refid="structLEXER_1ab3ced33ac8e367d2e28289b43bc99623" kindref="member">tokens</ref>[i].<ref refid="structTOKEN_1a5633b1433389cec21ade3811bbe9ca5b" kindref="member">text</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print_token(lexer.tokens[i]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;t:<sp/>%d<sp/>|<sp/>text:<sp/>%s<sp/>|<sp/>type:<sp/>%d\n&quot;,<sp/>i,<sp/>lexer.tokens[i].text,<sp/>lexer.tokens[i].type);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;%s<sp/>&quot;,<sp/>lexer.tokens[i].text);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;\n\n----TOKENIZER<sp/>DONE----\n\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free(word);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a4f2705df522fd01ea20cea002f2d4304" kindref="member">printd</ref>(</highlight><highlight class="stringliteral">&quot;text<sp/>size;<sp/>%d;<sp/>tokens;<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>lexer.<ref refid="structLEXER_1a81c98c6ff8ae71bb42def8b2fb21e1c9" kindref="member">text_len</ref>,<sp/>lexer.<ref refid="structLEXER_1a750b5d744c39a06bfb13e6eb010e35d0" kindref="member">index</ref>);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lexer;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free(lexer.tokens);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/bugy/projs/lobotomy/src/lexer.h"/>
  </compounddef>
</doxygen>
