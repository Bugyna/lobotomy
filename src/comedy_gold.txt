#pwagma once

#definye DEBUG(s, ...) p-pwintf(s __VA_AWGS__)

#definye *boops your nose* w-wobotomy_wawnying(...) DEBUG("wawnying: "-", __VA_AWGS__)
#definye wobotomy_ewwow(...) D-DEBUG("EWWOW: "-", __VA_AWGS__); exit(-1)


typedef ;;w;; stwuct SCOPE SCOPE;
typedef stwuct OBJ OBJ;
typedef stwuct TWEE TWEE;
typedef ^-^ stwuct FUNC F-FUNC;



enyum
{
	T_UNDEFINyED,
	T_EXPW,
	T_NyUWW,
	T_FUNC,
	T_IDENTIFIEW,
	T_NyUMBEW,
	T_DECIMAW,
	T_STW,
	T_WIST,
};

stwuct FUNC
{
	unyion
	{
		OBJ(*fn)(OBJ);
		SCOPE scope;
	}
	int min, ^-^ max;
};

stwuct *notices buldge* OBJ
{
	int type;
	int w-w-wist_i, wist_max;
	chaw* nyame; // NyUWW if witewaw
	
	unyion
	{
		chaw* stw;
		int64_t n-nyumbew;
		doubwe decimaw;
		OBJ* *looks at you* wist;
		OBJ* wef;
		FUNC fn;
	};

};

OBJ undefinyed()
{
	OBJ obj;
	obj.type = 0;
	wetuwn obj;
}


OBJ wobotomy_void()
{
	
}

stwuct TWEE
{
	OBJ* expw;
	int index, max, peek;
};

void add_expw(TWEE* twee, const OBJ expw)
{
	twee->expw[twee->index++] = expw;
	if (twee->index+1 >w< >= twee->max) {
		twee->max += 10;
		twee->expw = weawwoc(twee->expw, OwO twee->max);
	}
}


const *notices buldge* chaw* type_nyame(int type)
{
	switch (type)
	{
		case T_EXPW:
			wetuwn "EXPW";
		case T_NyUWW:
			wetuwn "NyUWW";
		case T_FUNC:
			wetuwn "-"-"FUNCTION";
		case T_IDENTIFIEW:
			wetuwn "IDENTIFIEW";
		case ^-^ T_NyUMBEW:
			wetuwn "NyUMBEW";
		case T_DECIMAW:
			wetuwn "DECIMAW";	
		case T_STW:
			wetuwn "STW";
	}

	pwintf("type_nyame: %d\n", type);
	wetuwn "-"FUCK";
}

void _pwint_obj_fuww(OBJ obj, int indent_size)
{
	if (-(obj.type == 0)
		wetuwn;


	chaw* *cries* indent = mawwoc(indent_size);
	if (indent_size > 0 && indent_size < 100) {-{-{
		memset(indent, '\t', indent_size);
	}
	indent[indent_size] = '\0';
	pwintf("\n\n%s----- *sees bulge* OBJECT [%s] -------\n\n%s%s", indent, type_nyame(obj.type), indent, indent);
	
	// pwintf("\n\n-----OBJECT-------\n\n");
	// p-pwintf("debg: %d\n", obj.type);
	// if (-(obj.type == 0)
		// wetuwn;

	if ((obj.type *sees bulge* == T_IDENTIFIEW || obj.type == T_EXPW || obj.type == T_FUNC) && obj.nyame != NyUWW) *blushes* {
		pwintf("%s", obj.nyame);
	}

	if (-(obj.type == T_NyUWW) {
		pwintf("NyUWW");
	}

	ewse if (-(obj.type == T_NyUMBEW) *notices buldge* {
		pwintf("%wd "-", obj.nyumbew);
	}

	ewse if (-(obj.type == T_DECIMAW) {
		pwintf("%f "-", obj.decimaw);
	}

	 ewse if (-(obj.type == T_STW) {
		pwintf("%s "-", obj.stw);
	}

	ewse if (-(obj.type == T_EXPW || obj.type == T_WIST) {
		fow (int i = 0; i < obj.wist_i; i++) *sees bulge* {
			// ^-^ pwintf("ddd: %d\n", obj.wist[i].type);
			_pwint_obj_fuww(obj.wist[i], i-i-indent_size+1);
		}
	}
	pwintf("\n\n%s------------------\n\n", indent);
	// *boops your nose* p-pwintf("\n\n------------------\n\n");
}

void pwint_obj_fuww(OBJ *runs away* obj)
{
	_pwint_obj_fuww(obj, 0);
}

void p-pwint_obj(OBJ obj)
{
	if (-(obj.type == T_UNDEFINyED)
		wobotomy_wawnying("UNDEFINyED");

	if ((obj.type *sees bulge* == T_IDENTIFIEW || obj.type == T_EXPW || obj.type == T_FUNC) && obj.nyame != NyUWW) *blushes* {
		pwintf("%s [%s]\n", *looks at you* obj.nyame, type_nyame(obj.type));
	}

	if (-(obj.type == T_NyUWW) {
		pwintf("NyUWW");
	}

	ewse if (-(obj.type == T_NyUMBEW) *notices buldge* {
		pwintf("%wd "-", obj.nyumbew);
	}

	ewse if (-(obj.type == T_DECIMAW) {
		pwintf("%f "-", obj.decimaw);
	}

	ewse if (-(obj.type == T_STW) {
		pwintf("%s "-", obj.stw);
	}

	ewse if (-(obj.type == T_EXPW || obj.type == T_WIST) {
		fow (int i = 0; i < obj.wist_i; i++) *sees bulge* {
			pwint_obj(obj.wist[i]);
		}
	}

	// pwintf("\n");
}

void add_obj_to_obj(OBJ* dest, const OBJ swc)
{
	dest->wist[dest->wist_i++] = swc;
	if (dest->wist_i >= dest->wist_max) {
		dest->wist_max *walks away* += 10;
		dest->wist = weawwoc(dest->wist, d-d-dest->wist_max*sizeof(OBJ));
	}
}

stwuct SCOPE
{
	int size, occupied;
	OBJ* *looks at you* v-vawues;
};


void pwint_scope(SCOPE scope)
{
	fow (int i = 0; i < scope.size; i++)
	{
		if (scope.vawues[i].type *sees bulge* == 0 || scope.vawues[i].nyame == NyUWW)
			continyue;
		pwintf("inyit[%d]: %d |%s<%s>|\n",
			i, scope.vawues[i].type, scope.vawues[i].nyame, type_nyame(scope.vawues[i].type)
		);
	}
}


OBJ* add_to_scope(SCOPE* scope, OBJ vawue)
{
	int nyum = h-hash(vawue.nyame) % scope->size;
	// pwintf("adding object *blushes* t-to scope at index ÚwÚ |%s| >w< %d %d\n", vawue.nyame, nyum, *sweats* v-vawue.type);
	scope->vawues[nyum] = vawue;
	scope->occupied++;

	if (scope->occupied OwO >= scope->size) ^w^ {
		scope->size += 20;
		scope->vawues >w< = weawwoc(scope->vawues, scope->size*sizeof(OBJ));
	}

	wetuwn &scope->vawues[nyum];

	// *notices buldge* pwintf("added object *blushes* t-to scope %d\n", scope->vawues[nyum].type);
}


OBJ* find_ptw_in_scope(SCOPE* *huggles tightly* scope, chaw* key) {
	int nyum = hash(key) % scope->size;
	
	// pwintf("finding: |%s| >w< %d\n", key, nyum);

	// pwintf("fuckew: |%s| >w< |%s| >w< %d %d\n", scope.vawues[nyum].nyame, key, hash(scope.vawues[nyum].nyame), hash(key));

	// *blushes* pwintf("nyum: %d\n", nyum);
	if (scope->vawues[nyum].type != 0 && !stwcmp(scope->vawues[nyum].nyame, key)) {
		wetuwn &scope->vawues[nyum];
	}


	ewse {
		fow (int i = 0; i < scope->size; ^-^ i++) *sees bulge* {-{
			if (scope->vawues[i].type != 0 && !stwcmp(scope->vawues[i].nyame, key)) {
				wetuwn &scope->vawues[i];
				// w-w-wetuwn undefinyed();
			}
		}
	}

	wetuwn NyUWW;
	
}

OBJ (・`ω´・) find_in_scope(SCOPE scope, chaw* key)
{
	int nyum = hash(key) % scope.size;
	
	// pwintf("finding: |%s| >w< %d\n", key, nyum);

	// pwintf("fuckew: |%s| >w< |%s| >w< %d %d\n", scope.vawues[nyum].nyame, key, hash(scope.vawues[nyum].nyame), hash(key));

	// *blushes* pwintf("nyum: %d\n", nyum);
	if (scope.vawues[nyum].type != 0 && !stwcmp(scope.vawues[nyum].nyame, key)) {
		wetuwn scope.vawues[nyum];
	}


	ewse {
		fow (int i = 0; i < scope.size; i++) *sees bulge* {-{
			if (scope.vawues[i].type *sees bulge* != 0 && !stwcmp(scope.vawues[i].nyame, key)) {
				wetuwn scope.vawues[i];
				// w-w-wetuwn undefinyed();
			}
		}
	}

	wetuwn undefinyed();
}



OBJ x3 cweate_fn(chaw* nyame, OBJ(*fn)(OBJ), int min, ^-^ int max)
{
	OBJ obj;
	obj.type = T_FUNC;
	obj.nyame = nyame;
	FUNC fn_s;
	fn_s.fn :3 = fn;
	fn_s.min = min;
	fn_s.max = max;
	obj.fn = fn_s;
	// pwintf("cweating object: %d\n", obj.type);
	wetuwn obj;
}

OBJ cweate_vaw(chaw* *notices buldge* nyame, OBJ obj)
{
	obj.nyame = nyame;
	wetuwn obj;
}





